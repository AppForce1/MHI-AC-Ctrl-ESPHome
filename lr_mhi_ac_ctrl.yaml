substitutions:
  # Unique device ID in HA
  deviceid: "mhi_ac_ctrl"
  # Unique device name in HA (sensor names will be prefixed by this name)
  devicename: "MHI-AC-Ctrl"

esphome:
  name: lr_mhi_ac_ctrl
  platform: ESP8266
  board: d1_mini
  platformio_options:
    # Run CPU at 160Mhz to fix mhi_ac_ctrl_core.loop error: -2
    board_build.f_cpu: 160000000L
  includes:
    - mhi_ac_ctrl.h
    - MHI-AC-Ctrl-core.h
    - MHI-AC-Ctrl-core.cpp

wifi:
  ssid: "**SSID**"
  password: "**PASSWORD**"

  ap:
    ssid: ${devicename}

logger:
  level: DEBUG
  baud_rate: 0

globals:
  - id: room_temp_api_timeout
    type: int
    restore_value: no
    initial_value: '120'

ota:

climate:
  - platform: custom
    lambda: |-
      auto mhi_ac_ctrl = new MhiAcCtrl();
      App.register_component(mhi_ac_ctrl);
      return {mhi_ac_ctrl};

    climates:
      - name: "${devicename}"
        id: ${deviceid}

api:
  reboot_timeout: 0s
  services:
    # Call the set_api_room_temperature service from HA to override the room temperature
    # If a new value has not been received after room_temp_api_timeout seconds, it will fall back to internal sensor
    - service: set_api_room_temperature
      variables:
        value: float
      then:
        - lambda: |-
            return ((MhiAcCtrl*)id(${deviceid}))->set_room_temperature(value);
    # Call the set_vanes service from HA to set the vane position
    # Needed because the ESPHome Climate class does not support this natively
    # Possible values: 1-4: static positions, 5: swing, 0: unknown
    - service: set_vanes
      variables:
        value: int
      then:
        - lambda: |-
            return ((MhiAcCtrl*)id(${deviceid}))->set_vanes(value);

sensor:
  - platform: uptime
    name: ${devicename} Uptime
  - platform: wifi_signal
    name: ${devicename} WiFi Signal
    update_interval: 60s
  - platform: custom
    lambda: |-
      return ((MhiAcCtrl*)id(${deviceid}))->get_sensors();

    # Sensor names in HA, you can change these if you want
    # Don't delete them or change their position in the list
    sensors:
      - name: ${devicename} error code
      - name: ${devicename} outdoor temperature
      - name: ${devicename} return air temperature
      - name: ${devicename} outdoor unit fan speed
      - name: ${devicename} indoor unit fan speed
      - name: ${devicename} current power
      - name: ${devicename} compressor frequency
      - name: ${devicename} indoor unit total run time
      - name: ${devicename} compressor total run time
      - name: ${devicename} vanes
      - name: ${devicename} energy used
      - name: ${devicename} Indoor (U-bend) HE temp 1
      - name: ${devicename} Indoor (capillary) HE temp 2
      - name: ${devicename} Indoor (suction header) HE temp 3
      - name: ${devicename} Outdoor HE temp
      - name: ${devicename} Outdoor unit exp. valve
      - name: ${devicename} Outdoor unit discharge pipe
      - name: ${devicename} Outdoor unit discharge pipe super heat
      - name: ${devicename} Protection error state
      - name: ${devicename} Vanes Left Right
        id: vanes_LR_received
        on_value:
          then:
            - lambda: |-
                float received_value = id(vanes_LR_received).state;
                if (received_value == 1.0) {
                  id(fan_control_lr).publish_state("Left");
                } else if (received_value == 2.0) {
                  id(fan_control_lr).publish_state("Left/Center");
                } else if (received_value == 3.0) {
                  id(fan_control_lr).publish_state("Center");
                } else if (received_value == 4.0) {
                  id(fan_control_lr).publish_state("Center/Right");
                } else if (received_value == 5.0) {
                  id(fan_control_lr).publish_state("Right");
                } else if (received_value == 6.0) {
                  id(fan_control_lr).publish_state("Left/Right");
                } else if (received_value == 7.0) {
                  id(fan_control_lr).publish_state("Right/Left");
                } else if (received_value == 8.0) {
                  id(fan_control_lr).publish_state("Swing");
                }
      - name: ${devicename} 3D Auto
        id: Dauto_received
        on_value:
          then:
            - lambda: |-
                bool received_value = id(Dauto_received).state;
                if (received_value) {
                  ESP_LOGD("main", "received 3DAuto from AC");
                  id(fan_control_3Dauto).publish_state(true);
                }
                else {
                  ESP_LOGD("main", "received 3DAuto off from AC");
                  id(fan_control_3Dauto).publish_state(false);
                }

binary_sensor:
  - platform: custom
    lambda: |-
      return ((MhiAcCtrl*)id(${deviceid}))->get_binary_sensors();

    binary_sensors:
      - name: ${devicename} defrost

text_sensor:
  - platform: version
    name: ${devicename} ESPHome Version
  - platform: wifi_info
    ip_address:
      name: ${devicename} IP
    ssid:
      name: ${devicename} SSID
    bssid:
      name: ${devicename} BSSID
  - platform: custom
    lambda: |-
      return ((MhiAcCtrl*)id(${deviceid}))->get_text_sensors();

    text_sensors:
      - name: ${devicename} Protection error state

select:
  - platform: template
    name: "Fan Control LR"
    id: fan_control_lr
    optimistic: true
    options:
      - "Left"
      - "Left/Center"
      - "Center"
      - "Center/Right"
      - "Right"
      - "Left/Right"
      - "Right/Left"
      - "Swing"
    on_value:
      - lambda: |-
          auto state = id(fan_control_lr).state.c_str();
          ESP_LOGD("main", "Option of my select: %s", state);
          uint8_t vanesLR = 0;  // Initialize the vanesLR variable
          if (id(fan_control_lr).state == "Left") {
            return ((MhiAcCtrl*)id(${deviceid}))->set_vanesLR(1);
          } else if (id(fan_control_lr).state == "Left/Center") {
            return ((MhiAcCtrl*)id(${deviceid}))->set_vanesLR(2);
          } else if (id(fan_control_lr).state == "Center") {
            return ((MhiAcCtrl*)id(${deviceid}))->set_vanesLR(3);
          } else if (id(fan_control_lr).state == "Center/Right") {
            return ((MhiAcCtrl*)id(${deviceid}))->set_vanesLR(4);
          } else if (id(fan_control_lr).state == "Right") {
            return ((MhiAcCtrl*)id(${deviceid}))->set_vanesLR(5);
          } else if (id(fan_control_lr).state == "Left/Right") {
            return ((MhiAcCtrl*)id(${deviceid}))->set_vanesLR(6);
          } else if (id(fan_control_lr).state == "Right/Left") {
            return ((MhiAcCtrl*)id(${deviceid}))->set_vanesLR(7);
          } else if (id(fan_control_lr).state == "Swing") {
            return ((MhiAcCtrl*)id(${deviceid}))->set_vanesLR(8);
          }

switch:
  - platform: template
    name: "3D Auto"
    id: fan_control_3Dauto
    icon: mdi:video-3d
    optimistic: true
    turn_on_action:
      - lambda: |-
          ESP_LOGD("main", "Turn on 3DAuto");
          return ((MhiAcCtrl*)id(${deviceid}))->set_3Dauto(1);
    turn_off_action:
      - lambda: |-
          ESP_LOGD("main", "Turn off 3DAuto");
          return ((MhiAcCtrl*)id(${deviceid}))->set_3Dauto(0);
